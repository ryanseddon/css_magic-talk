doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Performant UIs using CSS magic

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Performant UIs using CSS magic

      section(data-bespoke-state='face')

      section(data-bespoke-state='har')
        h2 Performance beyond HTTP

      section
        h2 Animation to improve performance
        ul
          li Well executed animation instills perception of performance
          li Not the bad old days of flash 20s transitions
          li
            a(href='https://medium.com/@michaelvillar/improve-the-payment-experience-with-animations-3d1b0a9b810e', target='_blank') Stripe checkout
            is a great example.

      section
        img(src='https://d262ilb51hltx0.cloudfront.net/max/800/1*NXaiefRJP2Qeqf93zU_1Cg.gif', height='80%')

      section
        h2 How can I do this?
        ul
          li
            a(href='http://bouncejs.com/') Bounce.js
          li Pseudo based physics
          li The web is capable of native performance*

      section(data-bespoke-state='emphatic')
        h2 Case study &mdash; ScrollListView.js

      section
        ul
          li Performant scrolling library
          li Reusable list items reordered on scroll
          li Uses flexbox order property!

      section
        img(src='http://i.imgur.com/jWUuhJO.gif', height="80%")
        a(href='http://www.thecssninja.com/css/scrolllistview') Read more

      section
        h2 But there's a problem
        ul
          li Works great for normal steady paced scrolling
          li High velocity scrolling the cells started to "white out"
          li
            a(href='https://ryanseddon.github.io/ScrollListViewi/example') Live demo

      section
        img(src='http://i.minus.com/ibx51muHPvs1Bk.gif', height='80%')

      section
        h2 Why?

      section
        h2 Performance
        ul
          li Cost of CSS property change
          li
            a(href='http://csstriggers.com', target='_blank') csstriggers.com
          li order property causes reflow & paint
          li Always use transform, opacity
          li Everything else is detrimental

      section
        img(src='images/order_cost.png', width='80%')

      section
        h2 Know your paints vs reflows
        ul
          li Rudimentary knowledge of the browser
          li Paint is a non geometric change
          li Reflow is a geometric change

      section
        h2 What causes a reflow or paint?
        pre
          code.language-javascript.
            // Paint no geometric changes
            body.style.visibility = 'hidden';

            // Paint & reflow
            body.style.fontSize = '20px';

            // Reflow, browser is forced to
            // return element geometry
            body.offsetLeft;

      section
        img(src='http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/devtools-waterfall.jpg', height='80%')

      section
        h2 Batching
        ul
          li Reads and writes
          li Layout & Paint will only happen once per tick
          li requestAnimationFrame 60fps

      section
        h2 Control & Minimise
        ul
          li DOM abstractions are your friend
          li React paved the way in this thinking
          li Embers HTMLBars is also taking this onboard
          li fastdom.js is a light weight example

      section
        h2 How do I measure UI performance?
        ul
          li To the dev tools Chrome, IE11, Safari, Firefox
          li All browsers now offer some form of timeline measurement!
          li Let's debug the ScrollListView.js issue

      section
        h2 Chrome timeline
        ul
          li Measure reflows, paints and frame rate
          li Doesn't illuminate why the "white out" is happening
          li Same for Firefox, Safari, IE11

      section
        img(src='images/timeline.png', width='730')

      section
        h2 Safari to the rescue
        ul
          li Show compositing borders
          li Shows textures that are being sent to GPU
          li Number should be small

      section
        img(src='images/textures.png', width='80%')

      section
        h2 Flooding the GPU
        ul
          li Uploading way too many textures
          li GPU bus can't handle it
          li We have our "white out" answer!
          li
            a(href='http://ariya.ofilabs.com/2013/06/optimizing-css3-for-gpu-compositing.html') Recommended reading
          li Order property isn't performant :(

      section
        h2 It's not easy
        ul
          li Dev tools are still immature
          li High performance UIs on the web is hard
          li ...but not impossible!

      section
        h2 Native performance on the web?
        ul
          li Possible through abstraction layer
          li
            | <a href='http://famo.us/', target='_blank'>Famo.us</a>
            | estews these ideas into such an abstraction
          li Flat DOM + rAF + GPU + Physics Engine = Awesome
          li The renderer can be DOM, SVG or even WebGL

      section
        h2 Performance is fragile
        ul
          li It's very easy to degrade performance
          li Abstractions put a layer in front
          li Hand rolling will usually end in tears
          li The DOM is the worst

      section
        h2 Web platform needs low level controls
        ul
          li Controlling paints & reflows
          li Isolation of components
          li Pretty much an iFrame without the issues

      section
        h2 Thanks!

    script(src='build/build.js')
    script(src='https://rawgit.com/ryanseddon/467c7ed5ef86850ba153/raw/ac2ee1cb5a9873dd6d2a70239571661df9c26fb6/famous.js')
    script(src='https://rawgit.com/ryanseddon/ffc2b6f0528cea3cd67f/raw/39e9fe217f403501a52aa26806bebb197a0f4cb0/head.js')
